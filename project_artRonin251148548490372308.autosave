import de.fhpotsdam.unfolding.*;
import de.fhpotsdam.unfolding.geo.*;
import de.fhpotsdam.unfolding.utils.*;
import de.fhpotsdam.unfolding.providers.*;
import de.fhpotsdam.unfolding.data.*;
import de.fhpotsdam.unfolding.marker.*;

import java.util.List;
import java.time.*;
import java.time.format.DateTimeFormatter;

Location beginLocation = new Location(51.00755f, -113.9989f);

DateTimeFormatter date_format = DateTimeFormatter.ofPattern("dd-MM-yy");

UnfoldingMap map;

Display mainDisplay ;

Table truck_rawdata;
PFont font;

int sizeOfRow ;
int c = 0; // Variable for line index
int currentLocation = 0;
int count_minus = 0;

int gbl_day;
int gbl_mon;

int gbl_hour;
int gbl_minus;
int beginIndexDay14,beginIndexDay15,beginIndexDay16,beginIndexDay17,beginIndexDay18,beginIndexDay19,beginIndexDay20;
int beginIndexDayBegin = 0;
int beginIndexDayEnd = 160986;

boolean indexBeginOfSearch14 = false;
boolean indexBeginOfSearch15 = false;
boolean indexBeginOfSearch16 = false;
boolean indexBeginOfSearch17 = false;
boolean indexBeginOfSearch18 = false;
boolean indexBeginOfSearch19 = false;
boolean indexBeginOfSearch20 = false;

boolean debugMode = true;

int indexBegin =0;
int indexEnd=100;
int strDay ;
int timer ;
int temp_gbl_day;

Truck [] trucks;
IndexDate [] listTime;
int indexListTime = 0;
boolean []boolIndexBeginOfHour = new boolean[24];
String selectDay = "";
String savedDay = "";
// Truck [] trucks = new Truck[160986];

void setup(){
    size(800, 600, P2D);
    mainDisplay = new Display(width,height);
    //size(800, 600, OPENGL);
    smooth();
    listTime = new IndexDate[8];
    // noStroke();
    gbl_hour = 0;
    gbl_minus = 0;
    
    font = createFont("Impact", 30, true);
    //? data init
    for (int i = 0; i < 24; i++) {
        boolIndexBeginOfHour[i] = false;
    }
  
    if(debugMode == true){        
        truck_rawdata = loadTable("data/truck1week_for_test.csv", "header");
        sizeOfRow = 5;
        trucks = new Truck[sizeOfRow];
    }else {
        truck_rawdata = loadTable("data/truck1week.csv", "header");    
        sizeOfRow = 160986;
        trucks = new Truck[sizeOfRow];
    }
    println(truck_rawdata.getRowCount() + " total rows in table");
    int count_row = 0;

    gbl_day = 13;
    int indexSearchDay = 14;
    int indexTemp;

    int count_hour = 0;
    int temp_gbl_hour;
    
    if (indexSearchDay == 14 ){indexTemp = 0;}
    else if(indexSearchDay == 15){indexTemp = 1;}
    else if(indexSearchDay == 16){indexTemp = 2;}
    else if(indexSearchDay == 17){indexTemp = 3;}
    else if(indexSearchDay == 18){indexTemp = 4;}
    else if(indexSearchDay == 19){indexTemp = 5;}
    else if(indexSearchDay == 20){indexTemp = 6;}
    
    for (TableRow row : truck_rawdata.rows()) 
    {
        //? get origin lat-long
        float lat_orig = row.getFloat("Latitude_orig");
        float long_orig = row.getFloat("Longitude_orig");

        //? get destination lat-long
        float lat_dest = row.getFloat("Latitude_dest");
        float long_dest = row.getFloat("Longitude_dest");

        //? get transportation duration
        LocalDateTime ldt_orig = LocalDateTime.of(LocalDate.parse(row.getString("date_orig"), date_format), LocalTime.parse(row.getString("time_orig")));
        LocalDateTime ldt_dest = LocalDateTime.of(LocalDate.parse(row.getString("date_dest"), date_format), LocalTime.parse(row.getString("time_dest")));
        String tempCheck = row.getString("date_orig");

        int []temp_date = int(split(tempCheck,'-'));
        temp_gbl_day = temp_date[0];

        int []temp_hour = int(split(tempCheck,':'));
        
        temp_gbl_hour = temp_hour[0];
        
        //? find duration between origin & destination
        float trans_duration_minutes = Duration.between(ldt_orig, ldt_dest).toMinutes();
        // float trans_duration_minutes = Duration.between(ldt_orig, ldt_dest).toMinutes();
        // float trans_duration_minutes = Duration.between(ldt_orig, ldt_dest).toMinutes();
        String temp_time_orig = row.getString("time_orig");
        trucks[count_row++] = new Truck(lat_orig,long_orig,lat_dest,long_dest,trans_duration_minutes,temp_time_orig);
    }

    if(gbl_day == 14){
        indexBegin = beginIndexDay14;
        indexEnd = beginIndexDay15;
    }else if (gbl_day == 15) {
        indexBegin = beginIndexDay15;
        indexEnd = beginIndexDay16;
    }
    else if (gbl_day == 16) {
        indexBegin = beginIndexDay16;
        indexEnd = beginIndexDay17;
    }
    else if (gbl_day == 17) {
        indexBegin = beginIndexDay17;
        indexEnd = beginIndexDay18;
    }
    else if (gbl_day == 18) {
        indexBegin = beginIndexDay18;
        indexEnd = beginIndexDay19;
    }
    else if (gbl_day == 19) {
        indexBegin = beginIndexDay19;
        indexEnd = beginIndexDay20;
    }
    
    else if (gbl_day == 20) {
        indexBegin = beginIndexDay20;
        indexEnd = beginIndexDayEnd;
    }
    else {
        indexBegin =0;
        indexEnd =100;
    }

    // init Map
    map = new UnfoldingMap(this);
    //map = new UnfoldingMap(this, new StamenMapProvider.TonerBackground());
    map.zoomToLevel(6);
    // map.panTo(beginLocation);
    // map.setZoomRange(4, 14); // prevent zooming too far out
    map.setPanningRestriction(beginLocation, 50);
    MapUtils.createDefaultEventDispatcher(this, map);
    frameRate(60); // frameRate(5) -> frameCount % 10 เปลี่ยนทีละ 2 วินาที
    timer = 15;
}

void draw(){
    // background(0);
    // gbl_day = 13;

    map.draw();
    if(debugMode == true){
        mainDisplay.debugPoint();
    }
    mainDisplay.timeDisplay(gbl_day,gbl_hour,gbl_minus);
    //listTime[0].get(0);
    for(int i = indexBegin ;i< indexBegin+100 ;i++){
        trucks[i].update(timer);
        trucks[i].display(gbl_day,gbl_hour,gbl_minus);
    }
    // println("indexBegin : "+indexBegin+" indexEnd : "+indexEnd);
    if (frameCount % timer == 0) {
        // println("gbl_minus: "+gbl_minus);
        gbl_minus ++;
        if((gbl_minus % 60 == 0 )){
            gbl_hour ++;
            if(gbl_hour % 24 == 0 ){
                gbl_day++;
            }
        }
    }
   
    mainDisplay.showDisplay();
}


void mouseMoved() 
{
//    Marker hitMarker = markerManager.getFirstHitMarker(mouseX, mouseY);
//    if (hitMarker != null) {
//        println("mouseX: "+mouseX+ " mouseY:" +mouseY);
//        // Select current marker 
//     //    hitMarker.setSelected(true);
//    } else {
//        // Deselect all other markers
//        for (Marker marker : markerManager.getMarkers()) {
//            marker.setSelected(false);
//        }
//    }
}
